service: import-3

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action: "s3:*"
      Resource:
        - arn:aws:s3:::import-service-task5/*
    - Effect: Allow
      Action: "sqs:*"
      Resource:
        - Fn::GetAtt: [ SQSQueue, Arn ]
    - Effect: Allow
      Action: "sns:*"
      Resource:
        Ref: SNSTopic
  environment:
    SQS_URL:
      Ref: SQSQueue
    SNS_ARN:
      Ref: SNSTopic

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: queue-task-6
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: queue-task-6
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: burak_andrej@mail.ru
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          price:
            - numeric:
              - '>'
              - 100
    SNSSubscriptionn:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: burak_andrej2@mail.ru
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          price:
            - numeric:
              - '<'
              - 100

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

package:
  individually: true
  patterns:
    - "!**"
    - "./dist"

functions:
  importProductsFile:
    handler: dist/importProductsFile.importProductsFile
    package:
      patterns:
        - "!dist/**"
        - "dist/importProductsFile.js"
    events:
      - http:
          method: get
          path: /import
          request:
            parameters:
              querystrings:
                name: true
          cors: true
          authorizer:
            name: tokenAuthorizer
            arn:
              !Join
                - ':'
                - - 'arn:aws:lambda'
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - 'function:authorization-service-dev-basicAuthorizer'
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  importFileParser:
      handler: dist/importFileParser.importFileParser
      package:
        patterns:
          - "!dist/**"
          - "dist/importFileParser.js"
      events:
        - s3:
            bucket: import-service-task5
            event: s3:ObjectCreated:*
            existing: true

  catalogItemsQueue:
    handler: dist/catalogItemsQueue.catalogItemsQueue
    package:
      patterns:
        - "!dist/**"
        - "dist/catalogItemsQueue.js"
    events:
      - http:
          method: post
          path: /catalogItemsQueue
          cors:
            origin: "*"
            headers:
              - Content-Type
            allowCredentials: false

  catalogBatchProcess:
    handler: dist/catalogBatchProcess.catalogBatchProcess
    package:
      patterns:
        - "!dist/**"
        - "dist/catalogBatchProcess.js"
    events:
      - sqs:
          batchSize: 5
          arn:
           Fn::GetAtt:
            - SQSQueue
            - Arn
